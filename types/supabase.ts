/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
import { Page, Block } from "@plastic-editor/protocol/lib/protocol";
import { namedTypes } from "ast-types";

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/blocks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.blocks.id"];
          owner_id?: parameters["rowFilter.blocks.owner_id"];
          block_id?: parameters["rowFilter.blocks.block_id"];
          content?: parameters["rowFilter.blocks.content"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["blocks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** blocks */
          blocks?: definitions["blocks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.blocks.id"];
          owner_id?: parameters["rowFilter.blocks.owner_id"];
          block_id?: parameters["rowFilter.blocks.block_id"];
          content?: parameters["rowFilter.blocks.content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.blocks.id"];
          owner_id?: parameters["rowFilter.blocks.owner_id"];
          block_id?: parameters["rowFilter.blocks.block_id"];
          content?: parameters["rowFilter.blocks.content"];
        };
        body: {
          /** blocks */
          blocks?: definitions["blocks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/page_content": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.page_content.id"];
          page_id?: parameters["rowFilter.page_content.page_id"];
          content?: parameters["rowFilter.page_content.content"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["page_content"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** page_content */
          page_content?: definitions["page_content"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.page_content.id"];
          page_id?: parameters["rowFilter.page_content.page_id"];
          content?: parameters["rowFilter.page_content.content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.page_content.id"];
          page_id?: parameters["rowFilter.page_content.page_id"];
          content?: parameters["rowFilter.page_content.content"];
        };
        body: {
          /** page_content */
          page_content?: definitions["page_content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/page_metas": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.page_metas.id"];
          page_id?: parameters["rowFilter.page_metas.page_id"];
          owner_id?: parameters["rowFilter.page_metas.owner_id"];
          is_public?: parameters["rowFilter.page_metas.is_public"];
          is_writable?: parameters["rowFilter.page_metas.is_writable"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["page_metas"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** page_metas */
          page_metas?: definitions["page_metas"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.page_metas.id"];
          page_id?: parameters["rowFilter.page_metas.page_id"];
          owner_id?: parameters["rowFilter.page_metas.owner_id"];
          is_public?: parameters["rowFilter.page_metas.is_public"];
          is_writable?: parameters["rowFilter.page_metas.is_writable"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.page_metas.id"];
          page_id?: parameters["rowFilter.page_metas.page_id"];
          owner_id?: parameters["rowFilter.page_metas.owner_id"];
          is_public?: parameters["rowFilter.page_metas.is_public"];
          is_writable?: parameters["rowFilter.page_metas.is_writable"];
        };
        body: {
          /** page_metas */
          page_metas?: definitions["page_metas"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/stars": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stars.id"];
          owner_id?: parameters["rowFilter.stars.owner_id"];
          content?: parameters["rowFilter.stars.content"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["stars"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** stars */
          stars?: definitions["stars"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stars.id"];
          owner_id?: parameters["rowFilter.stars.owner_id"];
          content?: parameters["rowFilter.stars.content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stars.id"];
          owner_id?: parameters["rowFilter.stars.owner_id"];
          content?: parameters["rowFilter.stars.content"];
        };
        body: {
          /** stars */
          stars?: definitions["stars"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  blocks: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    owner_id: string;
    block_id?: string;
    content: Block;
  };
  page_content: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    page_id?: string;
    content: Page;
  };
  page_metas: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    page_id?: string;
    owner_id: string;
    is_public?: boolean;
    is_writable?: boolean;
  };
  stars: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    owner_id?: string;
    content: string[];
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** blocks */
  "body.blocks": definitions["blocks"];
  "rowFilter.blocks.id": string;
  "rowFilter.blocks.owner_id": string;
  "rowFilter.blocks.block_id": string;
  "rowFilter.blocks.content": string;
  /** page_content */
  "body.page_content": definitions["page_content"];
  "rowFilter.page_content.id": string;
  "rowFilter.page_content.page_id": string;
  "rowFilter.page_content.content": string;
  /** page_metas */
  "body.page_metas": definitions["page_metas"];
  "rowFilter.page_metas.id": string;
  "rowFilter.page_metas.page_id": string;
  "rowFilter.page_metas.owner_id": string;
  "rowFilter.page_metas.is_public": string;
  "rowFilter.page_metas.is_writable": string;
  /** stars */
  "body.stars": definitions["stars"];
  "rowFilter.stars.id": string;
  "rowFilter.stars.owner_id": string;
  "rowFilter.stars.content": string;
}

export interface operations {}

export interface external {}
